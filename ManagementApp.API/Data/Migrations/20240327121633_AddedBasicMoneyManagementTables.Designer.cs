// <auto-generated />
using System;
using ManagementApp.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManagementApp.API.Data.Migrations
{
    [DbContext(typeof(MainDataContext))]
    [Migration("20240327121633_AddedBasicMoneyManagementTables")]
    partial class AddedBasicMoneyManagementTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManagementApp.API.Data.Models.MoneyManagement.MoneyAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdaterId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.HasIndex("UserId");

                    b.ToTable("MoneyAccounts", (string)null);
                });

            modelBuilder.Entity("ManagementApp.API.Data.Models.MoneyManagement.MoneyBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Summary")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdaterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("MoneyBanks", (string)null);
                });

            modelBuilder.Entity("ManagementApp.API.Data.Models.MoneyManagement.MoneyBorrowed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginBankId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdaterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OriginBankId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("MoneyBorrowed", (string)null);
                });

            modelBuilder.Entity("ManagementApp.API.Data.Models.MoneyManagement.MoneyMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OriginBankId")
                        .HasColumnType("int");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdaterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OriginBankId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("MoneyMovements", (string)null);
                });

            modelBuilder.Entity("ManagementApp.API.Data.Models.MoneyManagement.MoneyMovementReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Summary")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdaterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("MoneyMovementReasons", (string)null);
                });

            modelBuilder.Entity("ManagementApp.API.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ManagementApp.API.Data.Models.MoneyManagement.MoneyAccount", b =>
                {
                    b.HasOne("ManagementApp.API.Data.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagementApp.API.Data.Models.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ManagementApp.API.Data.Models.User", null)
                        .WithMany("MoneyAccounts")
                        .HasForeignKey("UserId");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("ManagementApp.API.Data.Models.MoneyManagement.MoneyBank", b =>
                {
                    b.HasOne("ManagementApp.API.Data.Models.MoneyManagement.MoneyAccount", "Account")
                        .WithMany("Banks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagementApp.API.Data.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagementApp.API.Data.Models.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("ManagementApp.API.Data.Models.MoneyManagement.MoneyBorrowed", b =>
                {
                    b.HasOne("ManagementApp.API.Data.Models.MoneyManagement.MoneyAccount", "Account")
                        .WithMany("MoneyBorrowed")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagementApp.API.Data.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagementApp.API.Data.Models.MoneyManagement.MoneyBank", "OriginBank")
                        .WithMany("MoneyBorrowed")
                        .HasForeignKey("OriginBankId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ManagementApp.API.Data.Models.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("Creator");

                    b.Navigation("OriginBank");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("ManagementApp.API.Data.Models.MoneyManagement.MoneyMovement", b =>
                {
                    b.HasOne("ManagementApp.API.Data.Models.MoneyManagement.MoneyAccount", "MoneyAccount")
                        .WithMany("Movements")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagementApp.API.Data.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagementApp.API.Data.Models.MoneyManagement.MoneyBank", "OriginBank")
                        .WithMany("Movements")
                        .HasForeignKey("OriginBankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagementApp.API.Data.Models.MoneyManagement.MoneyMovementReason", "Reason")
                        .WithMany("Movements")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementApp.API.Data.Models.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("MoneyAccount");

                    b.Navigation("OriginBank");

                    b.Navigation("Reason");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("ManagementApp.API.Data.Models.MoneyManagement.MoneyMovementReason", b =>
                {
                    b.HasOne("ManagementApp.API.Data.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManagementApp.API.Data.Models.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("ManagementApp.API.Data.Models.MoneyManagement.MoneyAccount", b =>
                {
                    b.Navigation("Banks");

                    b.Navigation("MoneyBorrowed");

                    b.Navigation("Movements");
                });

            modelBuilder.Entity("ManagementApp.API.Data.Models.MoneyManagement.MoneyBank", b =>
                {
                    b.Navigation("MoneyBorrowed");

                    b.Navigation("Movements");
                });

            modelBuilder.Entity("ManagementApp.API.Data.Models.MoneyManagement.MoneyMovementReason", b =>
                {
                    b.Navigation("Movements");
                });

            modelBuilder.Entity("ManagementApp.API.Data.Models.User", b =>
                {
                    b.Navigation("MoneyAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
